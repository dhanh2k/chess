* {
    margin: 0;
    box-sizing: border-box;
    user-select: none;
}

body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: lightblue;
    flex-direction: row;
}

.box {
    display: grid;
    grid-template-columns: repeat(1, 4vh);
    grid-template-rows: repeat(16, 4vh);
    /* background-color: white; */
    margin-left: 4vh;
    margin-right: 4vh;
    position: relative;
}

.cell {
    box-shadow: inset 0 0 5px white;
}

.captured {
    --x: 0;
    --y: 4;
    width: 4vh;
    height: 4vh;
    position: absolute;
    top: calc(var(--y) * 4vh);
    left: 0;
}

.captured img {
    width: 100%;
    height: 100%;
}

#chessboard {
    display: grid;
    grid-template-columns: repeat(8, 8vh);
    grid-template-rows: repeat(8, 8vh);
    position: relative;
}

.white {
    background-color: white;
    display: flex;
    justify-content: center;
    align-items: center;
}

.black {
    background-color: black;
    display: flex;
    justify-content: center;
    align-items: center;
}

.white:hover {
    box-shadow: inset 2.5px 2.5px gray, inset -2.5px -2.5px gray;
}

.black:hover {
    box-shadow: inset 2.5px 2.5px gainsboro, inset -2.5px -2.5px gainsboro;
}

.white::after {
    content: '';
    width: 3vh;
    height: 3vh;
    background-color: rgb(23, 210, 23);
    border-radius: 20px;
}

.black::after {
    content: '';
    width: 3vh;
    height: 3vh;
    background-color: rgb(23, 210, 23);
    border-radius: 20px;
}

.piece {
    --x: 4;
    --y: 4;
    width: 8vh;
    height: 8vh;
    position: absolute;
    top: calc(var(--x) * 8vh);
    left: calc(var(--y) * 8vh);
    cursor: grab;
}

.piece img {
    width: 100%;
    height: 100%;
    pointer-events: none;
}

@media screen and (max-width: 1000px) {
    body {
        flex-direction: column;
    }

    #chessboard {
        grid-template-columns: repeat(8, 8.5vw);
        grid-template-rows: repeat(8, 8.5vw);
    }

    .piece {
        width: 8.5vw;
        height: 8.5vw;
        top: calc(var(--x) * 8.5vw);
        left: calc(var(--y) * 8.5vw);
    }

    .box {
        grid-template-columns: repeat(16, 4.25vw);
        grid-template-rows: repeat(1, 4.25vw);
        margin-top: 4vw;
        margin-bottom: 4vw;
    }

    .captured {
        --x: 0;
        --y: 4;
        width: 4.25vw;
        height: 4.25vw;
        position: absolute;
        top: 0;
        left: calc(var(--x) * 4vh);
    }
}

